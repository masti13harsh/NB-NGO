paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: User.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: User.replaceOrCreate__post_Users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__put_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - User
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: User.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'User.replaceById__post_Users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with email verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/People/{id}/accessTokens/{fk}':
    get:
      tags:
        - Person
      summary: Find a related item by id for accessTokens.
      operationId: Person.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Person
      summary: Delete a related item by id for accessTokens.
      operationId: Person.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Person
      summary: Update a related item by id for accessTokens.
      operationId: Person.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/People/{id}/isNgo':
    get:
      tags:
        - Person
      summary: Fetches hasOne relation isNgo.
      operationId: Person.prototype.__get__isNgo
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
    post:
      tags:
        - Person
      summary: Creates a new instance in isNgo of this model.
      operationId: Person.prototype.__create__isNgo
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ngo'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
    put:
      tags:
        - Person
      summary: Update isNgo of this model.
      operationId: Person.prototype.__update__isNgo
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ngo'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
    delete:
      tags:
        - Person
      summary: Deletes isNgo of this model.
      operationId: Person.prototype.__destroy__isNgo
      parameters:
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/People/{id}/accessTokens':
    get:
      tags:
        - Person
      summary: Queries accessTokens of Person.
      operationId: Person.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Person
      summary: Creates a new instance in accessTokens of this model.
      operationId: Person.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Person
      summary: Deletes all accessTokens of this model.
      operationId: Person.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/People/{id}/accessTokens/count':
    get:
      tags:
        - Person
      summary: Counts accessTokens of Person.
      operationId: Person.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /People:
    post:
      tags:
        - Person
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Person.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    patch:
      tags:
        - Person
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Person.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    put:
      tags:
        - Person
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Person.replaceOrCreate__put_People
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    get:
      tags:
        - Person
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Person.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Person'
      deprecated: false
  /People/replaceOrCreate:
    post:
      tags:
        - Person
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Person.replaceOrCreate__post_People_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  /People/upsertWithWhere:
    post:
      tags:
        - Person
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Person.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  '/People/{id}/exists':
    get:
      tags:
        - Person
      summary: Check whether a model instance exists in the data source.
      operationId: 'Person.exists__get_People_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/People/{id}':
    head:
      tags:
        - Person
      summary: Check whether a model instance exists in the data source.
      operationId: 'Person.exists__head_People_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Person
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Person.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    put:
      tags:
        - Person
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Person.replaceById__put_People_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    delete:
      tags:
        - Person
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Person.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Person
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Person.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Person'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  '/People/{id}/replace':
    post:
      tags:
        - Person
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Person.replaceById__post_People_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  /People/findOne:
    get:
      tags:
        - Person
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Person.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  /People/update:
    post:
      tags:
        - Person
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Person.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /People/count:
    get:
      tags:
        - Person
      summary: Count instances of the model matched by where from the data source.
      operationId: Person.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /People/login:
    post:
      tags:
        - Person
      summary: Login a user with username/email and password.
      operationId: Person.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: Related objects to include in the response. See the description of return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created on
              login.

              Depending on the value of `include` parameter, the body may contain
              additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /People/logout:
    post:
      tags:
        - Person
      summary: Logout a user with access token.
      operationId: Person.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /People/confirm:
    get:
      tags:
        - Person
      summary: Confirm a user registration with email verification token.
      operationId: Person.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /People/reset:
    post:
      tags:
        - Person
      summary: Reset password for a user with email.
      operationId: Person.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/ngos/{id}/belongsToPerson':
    get:
      tags:
        - ngo
      summary: Fetches belongsTo relation belongsToPerson.
      operationId: ngo.prototype.__get__belongsToPerson
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  '/ngos/{id}/hasRequirements/{fk}':
    get:
      tags:
        - ngo
      summary: Find a related item by id for hasRequirements.
      operationId: ngo.prototype.__findById__hasRequirements
      parameters:
        - name: fk
          in: path
          description: Foreign key for hasRequirements
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
    delete:
      tags:
        - ngo
      summary: Delete a related item by id for hasRequirements.
      operationId: ngo.prototype.__destroyById__hasRequirements
      parameters:
        - name: fk
          in: path
          description: Foreign key for hasRequirements
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - ngo
      summary: Update a related item by id for hasRequirements.
      operationId: ngo.prototype.__updateById__hasRequirements
      parameters:
        - name: fk
          in: path
          description: Foreign key for hasRequirements
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ngoRequirement'
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
  '/ngos/{id}/hasDonors/{fk}':
    get:
      tags:
        - ngo
      summary: Find a related item by id for hasDonors.
      operationId: ngo.prototype.__findById__hasDonors
      parameters:
        - name: fk
          in: path
          description: Foreign key for hasDonors
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
    delete:
      tags:
        - ngo
      summary: Delete a related item by id for hasDonors.
      operationId: ngo.prototype.__destroyById__hasDonors
      parameters:
        - name: fk
          in: path
          description: Foreign key for hasDonors
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - ngo
      summary: Update a related item by id for hasDonors.
      operationId: ngo.prototype.__updateById__hasDonors
      parameters:
        - name: fk
          in: path
          description: Foreign key for hasDonors
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ngoDonor'
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
  '/ngos/{id}/hasRequirements':
    get:
      tags:
        - ngo
      summary: Queries hasRequirements of ngo.
      operationId: ngo.prototype.__get__hasRequirements
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ngoRequirement'
      deprecated: false
    post:
      tags:
        - ngo
      summary: Creates a new instance in hasRequirements of this model.
      operationId: ngo.prototype.__create__hasRequirements
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ngoRequirement'
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
    delete:
      tags:
        - ngo
      summary: Deletes all hasRequirements of this model.
      operationId: ngo.prototype.__delete__hasRequirements
      parameters:
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/ngos/{id}/hasRequirements/count':
    get:
      tags:
        - ngo
      summary: Counts hasRequirements of ngo.
      operationId: ngo.prototype.__count__hasRequirements
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/ngos/{id}/hasDonors':
    get:
      tags:
        - ngo
      summary: Queries hasDonors of ngo.
      operationId: ngo.prototype.__get__hasDonors
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ngoDonor'
      deprecated: false
    post:
      tags:
        - ngo
      summary: Creates a new instance in hasDonors of this model.
      operationId: ngo.prototype.__create__hasDonors
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ngoDonor'
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
    delete:
      tags:
        - ngo
      summary: Deletes all hasDonors of this model.
      operationId: ngo.prototype.__delete__hasDonors
      parameters:
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/ngos/{id}/hasDonors/count':
    get:
      tags:
        - ngo
      summary: Counts hasDonors of ngo.
      operationId: ngo.prototype.__count__hasDonors
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ngos:
    post:
      tags:
        - ngo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ngo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
    patch:
      tags:
        - ngo
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ngo.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
    put:
      tags:
        - ngo
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ngo.replaceOrCreate__put_ngos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
    get:
      tags:
        - ngo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ngo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ngo'
      deprecated: false
  /ngos/replaceOrCreate:
    post:
      tags:
        - ngo
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ngo.replaceOrCreate__post_ngos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
  /ngos/upsertWithWhere:
    post:
      tags:
        - ngo
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ngo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ngo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
  '/ngos/{id}/exists':
    get:
      tags:
        - ngo
      summary: Check whether a model instance exists in the data source.
      operationId: 'ngo.exists__get_ngos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ngos/{id}':
    head:
      tags:
        - ngo
      summary: Check whether a model instance exists in the data source.
      operationId: 'ngo.exists__head_ngos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ngo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ngo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
    put:
      tags:
        - ngo
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ngo.replaceById__put_ngos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
    delete:
      tags:
        - ngo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ngo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ngo
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ngo.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ngo'
        - name: id
          in: path
          description: ngo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
  '/ngos/{id}/replace':
    post:
      tags:
        - ngo
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ngo.replaceById__post_ngos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
  /ngos/findOne:
    get:
      tags:
        - ngo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ngo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
  /ngos/update:
    post:
      tags:
        - ngo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ngo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ngo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ngos/count:
    get:
      tags:
        - ngo
      summary: Count instances of the model matched by where from the data source.
      operationId: ngo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/ngoRequirements/{id}/belongsToNgo':
    get:
      tags:
        - ngoRequirement
      summary: Fetches belongsTo relation belongsToNgo.
      operationId: ngoRequirement.prototype.__get__belongsToNgo
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: ngoRequirement id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
  /ngoRequirements:
    post:
      tags:
        - ngoRequirement
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ngoRequirement.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoRequirement'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
    patch:
      tags:
        - ngoRequirement
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ngoRequirement.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoRequirement'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
    put:
      tags:
        - ngoRequirement
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ngoRequirement.replaceOrCreate__put_ngoRequirements
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoRequirement'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
    get:
      tags:
        - ngoRequirement
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ngoRequirement.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ngoRequirement'
      deprecated: false
  /ngoRequirements/replaceOrCreate:
    post:
      tags:
        - ngoRequirement
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ngoRequirement.replaceOrCreate__post_ngoRequirements_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoRequirement'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
  /ngoRequirements/upsertWithWhere:
    post:
      tags:
        - ngoRequirement
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ngoRequirement.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ngoRequirement'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
  '/ngoRequirements/{id}/exists':
    get:
      tags:
        - ngoRequirement
      summary: Check whether a model instance exists in the data source.
      operationId: 'ngoRequirement.exists__get_ngoRequirements_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ngoRequirements/{id}':
    head:
      tags:
        - ngoRequirement
      summary: Check whether a model instance exists in the data source.
      operationId: 'ngoRequirement.exists__head_ngoRequirements_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ngoRequirement
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ngoRequirement.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
    put:
      tags:
        - ngoRequirement
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ngoRequirement.replaceById__put_ngoRequirements_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoRequirement'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
    delete:
      tags:
        - ngoRequirement
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ngoRequirement.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ngoRequirement
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ngoRequirement.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ngoRequirement'
        - name: id
          in: path
          description: ngoRequirement id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
  '/ngoRequirements/{id}/replace':
    post:
      tags:
        - ngoRequirement
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ngoRequirement.replaceById__post_ngoRequirements_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoRequirement'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
  /ngoRequirements/findOne:
    get:
      tags:
        - ngoRequirement
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ngoRequirement.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoRequirement'
      deprecated: false
  /ngoRequirements/update:
    post:
      tags:
        - ngoRequirement
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ngoRequirement.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ngoRequirement'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ngoRequirements/count:
    get:
      tags:
        - ngoRequirement
      summary: Count instances of the model matched by where from the data source.
      operationId: ngoRequirement.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/ngoDonors/{id}/belongsToNgo':
    get:
      tags:
        - ngoDonor
      summary: Fetches belongsTo relation belongsToNgo.
      operationId: ngoDonor.prototype.__get__belongsToNgo
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: ngoDonor id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngo'
      deprecated: false
  /ngoDonors:
    post:
      tags:
        - ngoDonor
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ngoDonor.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoDonor'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
    patch:
      tags:
        - ngoDonor
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: ngoDonor.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoDonor'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
    put:
      tags:
        - ngoDonor
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ngoDonor.replaceOrCreate__put_ngoDonors
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoDonor'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
    get:
      tags:
        - ngoDonor
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ngoDonor.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ngoDonor'
      deprecated: false
  /ngoDonors/replaceOrCreate:
    post:
      tags:
        - ngoDonor
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: ngoDonor.replaceOrCreate__post_ngoDonors_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoDonor'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
  /ngoDonors/upsertWithWhere:
    post:
      tags:
        - ngoDonor
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: ngoDonor.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ngoDonor'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
  '/ngoDonors/{id}/exists':
    get:
      tags:
        - ngoDonor
      summary: Check whether a model instance exists in the data source.
      operationId: 'ngoDonor.exists__get_ngoDonors_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ngoDonors/{id}':
    head:
      tags:
        - ngoDonor
      summary: Check whether a model instance exists in the data source.
      operationId: 'ngoDonor.exists__head_ngoDonors_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ngoDonor
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ngoDonor.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
    put:
      tags:
        - ngoDonor
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ngoDonor.replaceById__put_ngoDonors_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoDonor'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
    delete:
      tags:
        - ngoDonor
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ngoDonor.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ngoDonor
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: ngoDonor.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ngoDonor'
        - name: id
          in: path
          description: ngoDonor id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
  '/ngoDonors/{id}/replace':
    post:
      tags:
        - ngoDonor
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'ngoDonor.replaceById__post_ngoDonors_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ngoDonor'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
  /ngoDonors/findOne:
    get:
      tags:
        - ngoDonor
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ngoDonor.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ngoDonor'
      deprecated: false
  /ngoDonors/update:
    post:
      tags:
        - ngoDonor
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ngoDonor.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ngoDonor'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ngoDonors/count:
    get:
      tags:
        - ngoDonor
      summary: Count instances of the model matched by where from the data source.
      operationId: ngoDonor.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  ngo:
    properties:
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
      country:
        type: string
      date:
        type: string
        format: date-time
      description:
        type: string
      fundRaised:
        type: number
        format: double
      fundRequired:
        type: number
        format: double
      id:
        type: number
        format: double
      itemsFulfilled:
        type: number
        format: double
      itemsRequired:
        type: number
        format: double
      landmark:
        type: string
      name:
        type: string
      pincode:
        type: number
        format: double
      profileImageUrl:
        type: string
      registrationNumber:
        type: string
      state:
        type: string
      totalStrength:
        type: number
        format: double
      category:
        type: string
      belongsToPersonId:
        type: number
        format: double
      personId:
        type: number
        format: double
    required:
      - addressLine1
      - city
      - country
      - id
      - name
      - pincode
      - registrationNumber
      - state
    additionalProperties: false
  Person:
    properties:
      category:
        type: string
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - category
      - email
    additionalProperties: false
  ngoRequirement:
    properties:
      id:
        type: number
        format: double
      ngoId:
        type: number
        format: double
      itemName:
        type: string
      itemCategory:
        type: string
      totalItemRequired:
        type: number
        format: double
      totalItemFulfilled:
        type: number
        format: double
      date:
        type: string
        format: date-time
      belongsToNgoId:
        type: number
        format: double
    required:
      - id
      - ngoId
      - itemName
      - itemCategory
      - totalItemRequired
      - date
    additionalProperties: false
  ngoDonor:
    properties:
      id:
        type: number
        format: double
      userId:
        type: number
        format: double
      ngoId:
        type: number
        format: double
      itemId:
        type: number
        format: double
      itemQuantity:
        type: number
        format: double
      fundDonated:
        type: number
        format: double
      optVolunteer:
        type: boolean
      volunteerId:
        type: number
        format: double
      selfVisit:
        type: boolean
      selfVisitDate:
        type: string
        format: date-time
      selfVisitConfirmedByNgo:
        type: boolean
      volunteerVisitConfirmed:
        type: boolean
      volunteerVisitDate:
        type: string
        format: date-time
      date:
        type: number
        format: double
      belongsToNgoId:
        type: number
        format: double
    required:
      - id
      - userId
      - ngoId
      - date
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: nb-ngo
  version: 1.0.0
  title: NB-NGO
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
